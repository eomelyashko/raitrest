<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

<!--    <http pattern="/resources/**" security="none"/>-->
<!--    <http pattern="/webjars/**" security="none"/>-->

    <http pattern="/rest/**" use-expressions="true" name="restSecurityFilterChain" create-session="stateless">
        <http-basic/>
        <intercept-url pattern="/rest/admin/**" access="hasRole('ROLE_ADMIN')"/>
        <intercept-url pattern="/rest/manager/**" access="hasRole('ROLE_MANAGER')"/>
        <intercept-url pattern="/rest/profile/register" access="isAnonymous()"/>
        <intercept-url pattern="/**" access="isAuthenticated()"/>
<!--        -->
        <csrf disabled="true"/>
    </http>

<!--    <beans:bean name="noopEncoder" class="org.springframework.security.crypto.password.NoOpPasswordEncoder"/>-->
    <beans:bean class="org.springframework.security.crypto.factory.PasswordEncoderFactories" id="passwordEncoder" factory-method="createDelegatingPasswordEncoder"/>

    <http>
        <intercept-url pattern="/index.html" access="permitAll()"/>
        <intercept-url pattern="/**/admin/**" access="hasRole('ROLE_ADMIN')"/>
        <intercept-url pattern="/**/manager/**" access="hasRole('ROLE_MANAGER')"/>
        <intercept-url pattern="/rest/profile/register" access="isAnonymous()"/>
        <intercept-url pattern="/**" access="isAuthenticated()"/>
        <form-login/>
        <logout/>
        <csrf disabled="true"/>
    </http>


    <authentication-manager>
        <authentication-provider user-service-ref="userService">
            <password-encoder ref="passwordEncoder"/>
         <!--   <jdbc-user-service data-source-ref="dataSource"
                               users-by-username-query="SELECT email, password, enabled FROM users WHERE email = ?"
                               authorities-by-username-query="
                                                       SELECT u.email, r.role FROM users u, user_roles r WHERE u.id = r.user_id AND u.email = ?"
            />-->

          <!--  <user-service>
                <user name="user@yandex.ru" password="password" authorities="ROLE_USER"/>
                <user name="admin@gmail.com" password="admin" authorities="ROLE_ADMIN"/>
                <user name="manager@yandex.ru" password="manager" authorities="ROLE_MANAGER"/>
                <user name="user_1@yandex.ru" password="password1" authorities="ROLE_USER"/>
                <user name="user_2@yandex.ru" password="password2" authorities="ROLE_USER"/>
                <user name="user_3@yandex.ru" password="password3" authorities="ROLE_USER"/>
                <user name="manager_1@yandex.ru" password="1password" authorities="ROLE_MANAGER"/>
                <user name="manager_2@yandex.ru" password="2password" authorities="ROLE_MANAGER"/>
                <user name="manager_3@yandex.ru" password="3password" authorities="ROLE_MANAGER"/>
            </user-service>-->
        </authentication-provider>
    </authentication-manager>
</beans:beans>